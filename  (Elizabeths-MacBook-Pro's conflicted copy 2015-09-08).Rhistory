install.packages("roxygen2")
library(fslr)
?fslsmooth
?flirt
library(devtools)
install_github('itksnapr ')
install_github('itksnapr')
?install_github
install_github(repo = 'itksnapr')
install_github(repo = 'itksnapr', username = 'muschellij2')
library(itksnapr)
?itksnap_cmd
?itksnap
itksnap (flair)
my.data <- dir('~/Desktop/OASIS_test', full.names = TRUE)
my.data
flair <- readNIfTI(my.data[1], reorient = FALSE)
itksnap (flair)
flair <- readNIfTI(my.data[1], reorient = FALSE)
t1 <- readNIfTI(my.data[3], reorient = FALSE)
t2 <- readNIfTI(my.data[5], reorient = FALSE)
pd <- readNIfTI(my.data[4], reorient = FALSE)
itksnap (flair, pd)
?glm
?datatyper
?library
print(sessionInfo())
?cal_img
names <- c("flair", "t1", "t2", "pd")
paste0(names, "_10")
paste0(names, "_20")
names <- c("flair", "t1", "t2", "pd")
names(oasis_datafram, c(names, paste0(names, "_10"),  paste0(names, "_20")))
c(names, paste0(names, "_10"),  paste0(names, "_20"))
library(oasisr)
?oasis_predict
?oasis_preproc
?predict
?predict.glm
library(oasisr)
?oasis_preproc
library(oasisr)
?oasis_preproc
library(oasisr)
?oasis_preproc
library(oasisr)
?oasis_preproc
library(oasisr)
?oasis_preproc
?voxel_selection
library(oasisr)
?voxel_selection
?voxel_selection
library(oasisr)
library(oasisr)
ls()
oasis_model
data(oasis_model)
ls()
summary(oasis_model)
library(devtools)
install_github('muschellij2/papayar')
library(papayar)
flair
papayar(flair)
papaya(flair)
library(oro.nifti)
my.data <- dir('~/Desktop/OASIS_test', full.names = TRUE)
flair <- readNIfTI(my.data[1], reorient = FALSE)
t1 <- readNIfTI(my.data[4], reorient = FALSE)
t2 <- readNIfTI(my.data[5], reorient = FALSE)
pd <- readNIfTI(my.data[2], reorient = FALSE)
ltoads <- readNIfTI(my.data[3], reorient = FALSE)
brain_mask <- niftiarr(ltoads, 1 * ltoads > 1)
papaya(flair)
papaya(t1)
my.data
papaya(t2)
papaya(pd)
papaya(brain_mask)
?niftiarr
?erode
??erode
??erode
setwd('~/OASIS_test')
library(oro.nifti)
library(fslr)
library(devtools)
use_travis()
install_github("hadley/devtools")
use_travis()
version()
version
library(oasisr)
library(oasisr)
library(oasisr)
load("~/Dropbox/Elizabeth_Sweeney_Documents/Packages/oasisr/data/oasis_model.rda")
dir()
ls()
oasis_model
session.info()
session.Info()
sessionInfo()
library(roxygen2)
sessionInfo()
load("~/Dropbox/Elizabeth_Sweeney_Documents/Packages/oasisr/data/oasis_model.rda")
x = load("~/Dropbox/Elizabeth_Sweeney_Documents/Packages/oasisrx/data/oasis_model.rda")
x
x = load("~/Dropbox/Elizabeth_Sweeney_Documents/Packages/oasisr/data/oasis_model.rda")
x
setwd('/Users/elizabethsweeney/Dropbox/Elizabeth_Sweeney_Documents/Current_Projects/Lesion_Trajectories/Scores')
load('Scores_dsr.csv')
?read.csv
scores <- read.table('Scores_dsr.csv')
scores <- read.table('Scores_dsr.csv')
scores <- read.table('Scores_dsr.csv', header = TRUE)
scores <- read.csv('Scores_dsr.csv', header = TRUE)
scores
scores$PC_1_Score
hist(scores$PC_1_Score)
table(scores$PC_1_Score)
table(scores$Lesion_Seg)
table(scores$Lesion_Seg, scores$PC_1_Score)
mean(scores$Lesion_Seg)
mean(scores$PC_1_Scores)
mean(scores$PC_1_Score)
length(scores$PC_1_Score)
53/363
363 - 347
?is.duplicate
??duplicated
library(itksnapr)
library(papayar)
??github
?image
??image
library(oasisr)
?hist
?t
library(oro.nifti)
?writeNIfTI
library(oro.nifti)
library(fslr)
options(fsl.path='/dexter/disk2/smart/programs/local/fsl')
my.data <- dir('~/Desktop/OASIS_test', full.names = TRUE)
t1 <- readNIfTI(my.data[4], reorient = FALSE)
bet_fast = fslbet(infile=t1, retimg=TRUE)
bet_fast <-  fslbet(infile=t1, retimg=TRUE)
bet_fast <-  fslbet(t1, retimg = TRUE)
bet_fast <-  fslbet(t1, retimg = TRUE)
?fslbet
fslbet(t1, retimg = TRUE)
fslbet(t1)
fslbet()
?niftiarr
niftiarr(t1, 0)
x <- niftiarr(t1, 0)
dim(x)
18.15 + 15.9 + 48.47
8.1 + 28.46 + 4.42 + 9.5
82.52 + 50.48 + 305.25
mridir2 <- x
visit2_files = file.path(mridir2,
c("113-02-MPRAGE_processed.nii.gz",
"113-02-T2w_processed.nii.gz",
"113-02-FLAIR_processed.nii.gz"))
?file.path
?sub
x <- c("hi", "ho", "hum")
sub("you", "my", x)
sub(".nii.gz", ".nii", x)
x <- c("hi.nii.gz", "ho", "hum")
sub(".nii.gz", ".nii", x)
?text
10 * 35 * 18
library(RColorBrewer)
?color.pal
??Color.pal
??Color.pallette
??Color.pallete
??Color.palette
?brewer.pal
?barplot
?cov
?strsplit
?barplot
17.08 + 2.11 + 26.81 + 10.47 + 3.55 + 15.39 + 8 + 17.42 + 7.81 + 25.03 + 13.60 + 7.81 + 10.63 + 10.47 + 10.81 + 4.49 + 13.07 + 16.20 + 9.79 + 17.66 + 1.66 + 11.63 + 31.83 + 16.98 + 2.95 + 3.40 + 4.39 + 12.63
20.80 + 40 + 50.62
450 + 333.67 + 111.42
19 - 12
330 / 7
2817 + 30 + 107
?density
library(RColorBrewer)
brewer.pal()
?brewer.pal
display.brewer.pal()
display.brewer.all()
?legend
817 + 55
40 * 14
?predict
?predict.glm
x <- c(1,0,1,0,1)
y <- c(0,0,0,1)
y <- c(0,0,0,1,1)
x & y
x == 1 & y == 0
x == 1 && y == 0
?save
c(8 - 5)/c(sqrt(9/1000))
c(-8 - 5)/c(sqrt(9/1000))
?colMeans
library(RColorBrewer)
??color.pal
?brewer.pal()
display.brewer.all
display.brewer.all()
?brewer.pal()
?legend
library(foreign)
my.data <- read.spss('BLL_March16_2015.sav')
getwd()
setwd('')
setwd('~/Desktop')
my.data <- read.spss('BLL_March16_2015.sav')
head(my.data)
names(my.data)
60 * 4
60 * 5
install.packages("roxygen2")
install.pckages('AnalyzeFMRI')
install.packages('AnalyzeFMRI')
library(tcltk)
library(oasis)
library(fslr)
options(fsl.path="/Applications/fsl")
datadir <- '/Users/elizabethsweeney/Dropbox/Elizabeth_Sweeney_Documents/Packages/OASIS_Test/'
flair <- readNIfTI(paste0(datadir, "2000310_FLAIR_matchToT1.nii"), reorient = FALSE)
t2 <- readNIfTI(paste0(datadir, "2000310t2_N3Corrected_clone_reg.nii"), reorient = FALSE)
t1 <- readNIfTI(paste0(datadir, "2000310_T1_matchToT1.nii"), reorient = FALSE)
pd <- readNIfTI(paste0(datadir, "2000310pd_N3Corrected_clone_reg.nii"), reorient = FALSE)
gold_standard <- readNIfTI(paste0(datadir, "2000310_mod.nii.gz"), reorient = FALSE)
?oasis_train_vectors
subj_1_vectors <- oasis_train_vectors(flair, t1, t2, pd, gold_standard, brain_mask = NULL,
preproc = TRUE, normalize = TRUE, slices = NULL,
orientation = "axial")
dim(subj_1_vectors)
head(subj_1_vectors)
my_model <- oasis_training(subj_1_vectors)
summary(my_model)
coeffs(my_model)
coef(my_model)
?oasis_predict
oasis_maps_my_model <- oasis_predict(flair, t1, t2, pd, brain_mask = NULL, preproc = TRUE,
normalize = TRUE, model = my_model)
image(oasis_maps_my_model)
image(oasis_maps_my_model[,,90])
image(oasis_maps_my_model[,,90])
?orthographic
orthographic(oasis_maps_my_model)
oasis_maps_paper_model <- oasis_predict(flair, t1, t2, pd, brain_mask = NULL, preproc = TRUE,
normalize = TRUE, model = NULL)
library(oasis)
?oasis_model
coef(oasis_model)
rm(list = ls())
library(oasis)
library(oasis)
?oasis_train_vectors
library(fslr)
options(fsl.path="/Applications/fsl")
library(devtools)
install_github('emsweene/oasis')
datadir <- '/Users/elizabethsweeney/Dropbox/Elizabeth_Sweeney_Documents/Packages/OASIS_Test/'
FLAIR <- readNIfTI(paste0(datadir, "2000310_FLAIR_matchToT1.nii"), reorient = FALSE)
T2 <- readNIfTI(paste0(datadir, "2000310t2_N3Corrected_clone_reg.nii"), reorient = FALSE)
T1 <- readNIfTI(paste0(datadir, "2000310_T1_matchToT1.nii"), reorient = FALSE)
PD <- readNIfTI(paste0(datadir, "2000310pd_N3Corrected_clone_reg.nii"), reorient = FALSE)
mask <- T1
mask[T1  > 0] <- 1
##smooth the probability map
sigma.smooth<-diag(3,3)
k.size<- 5
prob_map<-niftiarr(FLAIR,
GaussSmoothArray(FLAIR,
sigma=sigma.smooth,
ksize=k.size,
mask=mask))
library(AnalyzeFMRI)
##smooth the probability map
sigma.smooth<-diag(3,3)
k.size<- 5
prob_map<-niftiarr(FLAIR,
GaussSmoothArray(FLAIR,
sigma=sigma.smooth,
ksize=k.size,
mask=mask))
image(prob_map[,,90])
oasis_study <- fslsmooth(FLAIR, sigma = 2, mask = mask)))
oasis_study <- fslsmooth(FLAIR, sigma = 2, mask = mask)
image(oasis_study[,,90])
oasis_study <- fslsmooth(FLAIR, sigma = 1, mask = mask)
image(oasis_study[,,90])
image(prob_map)
image(prob_map[,,90])
sum(oasis_study - prob_map)
x <- oasis_study[,,90]
x <- oasis_study - prob_map
image(x[,,90])
max(x)
min(x)
image(oasis_study[,,90])
image(prob_map[,,90])
image(oasis_study[,,90])
image(prob_map[,,90])
oasis_study <- fslsmooth(FLAIR, sigma = 1.5, mask = mask)
image(prob_map[,,90])
image(oasis_study[,,90])
image(prob_map[,,90])
image(oasis_study[,,90])
oasis_study <- fslsmooth(FLAIR, sigma = 1.25, mask = mask)
image(oasis_study[,,90])
image(prob_map[,,90])
image(prob_map[,,90] - oasis_study[,,90])
max(prob_map[,,90] - oasis_study[,,90])
min(prob_map[,,90] - oasis_study[,,90])
library(oasis)
